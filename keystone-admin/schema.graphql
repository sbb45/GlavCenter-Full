# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  createdAt: DateTime
}

type PasswordState {
  isSet: Boolean!
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  posts: PostManyRelationFilter
  createdAt: DateTimeNullableFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  createdAt: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForUpdateInput
  createdAt: DateTime
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
  posts: PostRelateToManyForCreateInput
  createdAt: DateTime
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

type Client {
  id: ID!
  name: String
  phone: String
  question: String
  overdue: String
  debt: Int
  payment: Int
  whoOwes: JSON
  createdAt: DateTime
}

input ClientWhereUniqueInput {
  id: ID
  phone: String
}

input ClientWhereInput {
  AND: [ClientWhereInput!]
  OR: [ClientWhereInput!]
  NOT: [ClientWhereInput!]
  id: IDFilter
  name: StringFilter
  phone: StringFilter
  question: StringFilter
  overdue: StringFilter
  debt: IntNullableFilter
  payment: IntNullableFilter
  createdAt: DateTimeNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input ClientOrderByInput {
  id: OrderDirection
  name: OrderDirection
  phone: OrderDirection
  question: OrderDirection
  overdue: OrderDirection
  debt: OrderDirection
  payment: OrderDirection
  createdAt: OrderDirection
}

input ClientUpdateInput {
  name: String
  phone: String
  question: String
  overdue: String
  debt: Int
  payment: Int
  whoOwes: JSON
  createdAt: DateTime
}

input ClientUpdateArgs {
  where: ClientWhereUniqueInput!
  data: ClientUpdateInput!
}

input ClientCreateInput {
  name: String
  phone: String
  question: String
  overdue: String
  debt: Int
  payment: Int
  whoOwes: JSON
  createdAt: DateTime
}

type Post {
  id: ID!
  title: String
  description: String
  content: Post_content_Document
  image: ImageFieldOutput
  author: User
  createdAt: DateTime
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

type ImageFieldOutput {
  id: ID!
  filesize: Int!
  width: Int!
  height: Int!
  extension: ImageExtension!
  url: String!
}

enum ImageExtension {
  jpg
  png
  webp
  gif
}

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  description: StringFilter
  author: UserWhereInput
  createdAt: DateTimeNullableFilter
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  description: OrderDirection
  createdAt: OrderDirection
}

input PostUpdateInput {
  title: String
  description: String
  content: JSON
  image: ImageFieldInput
  author: UserRelateToOneForUpdateInput
  createdAt: DateTime
}

input ImageFieldInput {
  upload: Upload!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  description: String
  content: JSON
  image: ImageFieldInput
  author: UserRelateToOneForCreateInput
  createdAt: DateTime
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type Component {
  id: ID!
  title: String
  slug: String
  content: JSON
  createdAt: DateTime
}

input ComponentWhereUniqueInput {
  id: ID
  slug: String
}

input ComponentWhereInput {
  AND: [ComponentWhereInput!]
  OR: [ComponentWhereInput!]
  NOT: [ComponentWhereInput!]
  id: IDFilter
  title: StringFilter
  slug: StringFilter
  createdAt: DateTimeNullableFilter
}

input ComponentOrderByInput {
  id: OrderDirection
  title: OrderDirection
  slug: OrderDirection
  createdAt: OrderDirection
}

input ComponentUpdateInput {
  title: String
  slug: String
  content: JSON
  createdAt: DateTime
}

input ComponentUpdateArgs {
  where: ComponentWhereUniqueInput!
  data: ComponentUpdateInput!
}

input ComponentCreateInput {
  title: String
  slug: String
  content: JSON
  createdAt: DateTime
}

type Review {
  id: ID!
  image: ImageFieldOutput
  content: Review_content_Document
  createdAt: DateTime
}

type Review_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ReviewWhereUniqueInput {
  id: ID
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
  id: IDFilter
  createdAt: DateTimeNullableFilter
}

input ReviewOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
}

input ReviewUpdateInput {
  image: ImageFieldInput
  content: JSON
  createdAt: DateTime
}

input ReviewUpdateArgs {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateInput!
}

input ReviewCreateInput {
  image: ImageFieldInput
  content: JSON
  createdAt: DateTime
}

type Advantage {
  id: ID!
  title: String
  content: Advantage_content_Document
  createdAt: DateTime
}

type Advantage_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input AdvantageWhereUniqueInput {
  id: ID
}

input AdvantageWhereInput {
  AND: [AdvantageWhereInput!]
  OR: [AdvantageWhereInput!]
  NOT: [AdvantageWhereInput!]
  id: IDFilter
  title: StringFilter
  createdAt: DateTimeNullableFilter
}

input AdvantageOrderByInput {
  id: OrderDirection
  title: OrderDirection
  createdAt: OrderDirection
}

input AdvantageUpdateInput {
  title: String
  content: JSON
  createdAt: DateTime
}

input AdvantageUpdateArgs {
  where: AdvantageWhereUniqueInput!
  data: AdvantageUpdateInput!
}

input AdvantageCreateInput {
  title: String
  content: JSON
  createdAt: DateTime
}

type Service {
  id: ID!
  title: String
  content: Service_content_Document
  createdAt: DateTime
}

type Service_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

input ServiceWhereUniqueInput {
  id: ID
}

input ServiceWhereInput {
  AND: [ServiceWhereInput!]
  OR: [ServiceWhereInput!]
  NOT: [ServiceWhereInput!]
  id: IDFilter
  title: StringFilter
  createdAt: DateTimeNullableFilter
}

input ServiceOrderByInput {
  id: OrderDirection
  title: OrderDirection
  createdAt: OrderDirection
}

input ServiceUpdateInput {
  title: String
  content: JSON
  createdAt: DateTime
}

input ServiceUpdateArgs {
  where: ServiceWhereUniqueInput!
  data: ServiceUpdateInput!
}

input ServiceCreateInput {
  title: String
  content: JSON
  createdAt: DateTime
}

type Calculator {
  id: ID!
  title: String
  isActive: CalculatorIsActiveType
  overdueTitle: String
  debtTitle: String
  paymentTitle: String
  whoOwesTitle: String
  debtMax: Int
  paymentMax: Int
  overdueOptions: JSON
  whoOwesOptions: JSON
  submitButtonText: String
  modalTitle: String
  modalSubtitle: String
  modalDescription: String
  modalInstruction: String
  modalSubmitText: String
  createdAt: DateTime
}

enum CalculatorIsActiveType {
  active
  inactive
}

input CalculatorWhereUniqueInput {
  id: ID
}

input CalculatorWhereInput {
  AND: [CalculatorWhereInput!]
  OR: [CalculatorWhereInput!]
  NOT: [CalculatorWhereInput!]
  id: IDFilter
  title: StringFilter
  isActive: CalculatorIsActiveTypeNullableFilter
  overdueTitle: StringFilter
  debtTitle: StringFilter
  paymentTitle: StringFilter
  whoOwesTitle: StringFilter
  debtMax: IntNullableFilter
  paymentMax: IntNullableFilter
  submitButtonText: StringFilter
  modalTitle: StringFilter
  modalSubtitle: StringFilter
  modalDescription: StringFilter
  modalInstruction: StringFilter
  modalSubmitText: StringFilter
  createdAt: DateTimeNullableFilter
}

input CalculatorIsActiveTypeNullableFilter {
  equals: CalculatorIsActiveType
  in: [CalculatorIsActiveType!]
  notIn: [CalculatorIsActiveType!]
  not: CalculatorIsActiveTypeNullableFilter
}

input CalculatorOrderByInput {
  id: OrderDirection
  title: OrderDirection
  isActive: OrderDirection
  overdueTitle: OrderDirection
  debtTitle: OrderDirection
  paymentTitle: OrderDirection
  whoOwesTitle: OrderDirection
  debtMax: OrderDirection
  paymentMax: OrderDirection
  submitButtonText: OrderDirection
  modalTitle: OrderDirection
  modalSubtitle: OrderDirection
  modalDescription: OrderDirection
  modalInstruction: OrderDirection
  modalSubmitText: OrderDirection
  createdAt: OrderDirection
}

input CalculatorUpdateInput {
  title: String
  isActive: CalculatorIsActiveType
  overdueTitle: String
  debtTitle: String
  paymentTitle: String
  whoOwesTitle: String
  debtMax: Int
  paymentMax: Int
  overdueOptions: JSON
  whoOwesOptions: JSON
  submitButtonText: String
  modalTitle: String
  modalSubtitle: String
  modalDescription: String
  modalInstruction: String
  modalSubmitText: String
  createdAt: DateTime
}

input CalculatorUpdateArgs {
  where: CalculatorWhereUniqueInput!
  data: CalculatorUpdateInput!
}

input CalculatorCreateInput {
  title: String
  isActive: CalculatorIsActiveType
  overdueTitle: String
  debtTitle: String
  paymentTitle: String
  whoOwesTitle: String
  debtMax: Int
  paymentMax: Int
  overdueOptions: JSON
  whoOwesOptions: JSON
  submitButtonText: String
  modalTitle: String
  modalSubtitle: String
  modalDescription: String
  modalInstruction: String
  modalSubmitText: String
  createdAt: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createClient(data: ClientCreateInput!): Client
  createClients(data: [ClientCreateInput!]!): [Client]
  updateClient(where: ClientWhereUniqueInput!, data: ClientUpdateInput!): Client
  updateClients(data: [ClientUpdateArgs!]!): [Client]
  deleteClient(where: ClientWhereUniqueInput!): Client
  deleteClients(where: [ClientWhereUniqueInput!]!): [Client]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createComponent(data: ComponentCreateInput!): Component
  createComponents(data: [ComponentCreateInput!]!): [Component]
  updateComponent(where: ComponentWhereUniqueInput!, data: ComponentUpdateInput!): Component
  updateComponents(data: [ComponentUpdateArgs!]!): [Component]
  deleteComponent(where: ComponentWhereUniqueInput!): Component
  deleteComponents(where: [ComponentWhereUniqueInput!]!): [Component]
  createReview(data: ReviewCreateInput!): Review
  createReviews(data: [ReviewCreateInput!]!): [Review]
  updateReview(where: ReviewWhereUniqueInput!, data: ReviewUpdateInput!): Review
  updateReviews(data: [ReviewUpdateArgs!]!): [Review]
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteReviews(where: [ReviewWhereUniqueInput!]!): [Review]
  createAdvantage(data: AdvantageCreateInput!): Advantage
  createAdvantages(data: [AdvantageCreateInput!]!): [Advantage]
  updateAdvantage(where: AdvantageWhereUniqueInput!, data: AdvantageUpdateInput!): Advantage
  updateAdvantages(data: [AdvantageUpdateArgs!]!): [Advantage]
  deleteAdvantage(where: AdvantageWhereUniqueInput!): Advantage
  deleteAdvantages(where: [AdvantageWhereUniqueInput!]!): [Advantage]
  createService(data: ServiceCreateInput!): Service
  createServices(data: [ServiceCreateInput!]!): [Service]
  updateService(where: ServiceWhereUniqueInput!, data: ServiceUpdateInput!): Service
  updateServices(data: [ServiceUpdateArgs!]!): [Service]
  deleteService(where: ServiceWhereUniqueInput!): Service
  deleteServices(where: [ServiceWhereUniqueInput!]!): [Service]
  createCalculator(data: CalculatorCreateInput!): Calculator
  createCalculators(data: [CalculatorCreateInput!]!): [Calculator]
  updateCalculator(where: CalculatorWhereUniqueInput!, data: CalculatorUpdateInput!): Calculator
  updateCalculators(data: [CalculatorUpdateArgs!]!): [Calculator]
  deleteCalculator(where: CalculatorWhereUniqueInput!): Calculator
  deleteCalculators(where: [CalculatorWhereUniqueInput!]!): [Calculator]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  client(where: ClientWhereUniqueInput!): Client
  clients(where: ClientWhereInput! = {}, orderBy: [ClientOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ClientWhereUniqueInput): [Client!]
  clientsCount(where: ClientWhereInput! = {}): Int
  post(where: PostWhereUniqueInput!): Post
  posts(where: PostWhereInput! = {}, orderBy: [PostOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PostWhereUniqueInput): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  component(where: ComponentWhereUniqueInput!): Component
  components(where: ComponentWhereInput! = {}, orderBy: [ComponentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ComponentWhereUniqueInput): [Component!]
  componentsCount(where: ComponentWhereInput! = {}): Int
  review(where: ReviewWhereUniqueInput!): Review
  reviews(where: ReviewWhereInput! = {}, orderBy: [ReviewOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ReviewWhereUniqueInput): [Review!]
  reviewsCount(where: ReviewWhereInput! = {}): Int
  advantage(where: AdvantageWhereUniqueInput!): Advantage
  advantages(where: AdvantageWhereInput! = {}, orderBy: [AdvantageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AdvantageWhereUniqueInput): [Advantage!]
  advantagesCount(where: AdvantageWhereInput! = {}): Int
  service(where: ServiceWhereUniqueInput!): Service
  services(where: ServiceWhereInput! = {}, orderBy: [ServiceOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ServiceWhereUniqueInput): [Service!]
  servicesCount(where: ServiceWhereInput! = {}): Int
  calculator(where: CalculatorWhereUniqueInput!): Calculator
  calculators(where: CalculatorWhereInput! = {}, orderBy: [CalculatorOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CalculatorWhereUniqueInput): [Calculator!]
  calculatorsCount(where: CalculatorWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialColumns: [String!]!
  initialSearchFields: [String!]!
  initialSort: KeystoneAdminUISort
  isSingleton: Boolean!
  hideCreate: Boolean!
  hideDelete: Boolean!
  isHidden: Boolean!
  itemQueryName: String!
  listQueryName: String!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
